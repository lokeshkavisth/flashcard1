{"version":3,"file":"static/js/811.eaf12be8.chunk.js","mappings":"oJAiBA,IAfe,SAAHA,GAA4D,IAAtDC,EAAID,EAAJC,KAAMC,EAAQF,EAARE,SAAUC,EAAEH,EAAFG,GAAIC,EAAIJ,EAAJI,KAAMC,EAAQL,EAARK,SAAUC,EAAKN,EAALM,MAAOC,EAAGP,EAAHO,IAC3D,OACEC,EAAAA,EAAAA,KAAA,UACEC,QAASN,EACTC,KAAMA,EACNE,MAAOA,EACPC,IAAKA,EACLF,SAAUA,EACVK,UAAWR,EAASS,SAEnBV,GAGP,C,+GCiBA,EA3BmB,SAAHD,GAAmD,IAA7CY,EAAKZ,EAALY,MAAOC,EAAEb,EAAFa,GAAIC,EAAId,EAAJc,KAAMC,EAAOf,EAAPe,QAASC,EAAWhB,EAAXgB,YAC9C,OACEC,EAAAA,EAAAA,MAAA,OAAKP,UAAU,qCAAoCC,SAAA,EACjDM,EAAAA,EAAAA,MAAA,SAAOF,QAASA,EAASL,UAAU,8BAA6BC,SAAA,CAC7DC,EAAM,QAETK,EAAAA,EAAAA,MAAA,OAAKP,UAAU,8CAA6CC,SAAA,EAC1DH,EAAAA,EAAAA,KAACU,EAAAA,GAAK,CACJd,KAAK,OACLS,GAAIA,EACJC,KAAMA,EACNE,YAAaA,EACbN,UAAU,kCACVS,UAAQ,EACRC,aAAa,WAEfZ,EAAAA,EAAAA,KAACa,EAAAA,GAAY,CACXP,KAAMA,EACNQ,UAAU,OACV,cAAY,YACZZ,UAAU,6CAKpB,E,oBC0EA,EAhGoB,SAAHV,GAAmC,IAA7BuB,EAAMvB,EAANuB,OAAQC,EAAaxB,EAAbwB,cAE7B,OACEP,EAAAA,EAAAA,MAAA,OAAKP,UAAU,mDAAkDC,SAAA,EAG/DM,EAAAA,EAAAA,MAAA,OACEP,UAAS,2DAA6DC,SAAA,EAGtEH,EAAAA,EAAAA,KAACiB,EAAU,CACTX,KAAI,eACJD,GAAI,QACJE,QAAS,QACTH,MAAO,eACPI,YAAa,uBAGfR,EAAAA,EAAAA,KAAA,OAAAG,UAEEH,EAAAA,EAAAA,KAACkB,EAAAA,EAAM,CACLtB,KAAM,SACNF,SACE,gEAEFD,MACEO,EAAAA,EAAAA,KAAAmB,EAAAA,SAAA,CAAAhB,UACEM,EAAAA,EAAAA,MAAA,SACEF,QAAQ,UACRL,UAAU,yCAAwCC,SAAA,EAElDH,EAAAA,EAAAA,KAACoB,EAAAA,IAAe,CAAClB,UAAU,kBAC1Ba,EAAOM,OAAOC,QAAU,SAAW,SAAS,UAC7CtB,EAAAA,EAAAA,KAACU,EAAAA,GAAK,CACJd,KAAK,OACLS,GAAG,UACHC,KAAI,iBACJiB,QAAM,EACNC,MAAM,GACNC,OAAO,UACPC,SAAU,SAACC,GACT,IAAMC,EAAOD,EAAEE,OAAOC,MAAM,GACtBC,EAAS,IAAIC,WACnBD,EAAOE,cAAcL,GAErBG,EAAOG,OAAS,WACdlB,EAAc,iBAAkBe,EAAOI,OACzC,CACF,aAOXpB,EAAOM,OAAOC,UACbtB,EAAAA,EAAAA,KAAAmB,EAAAA,SAAA,CAAAhB,UACEM,EAAAA,EAAAA,MAAA,OAAKP,UAAU,0BAAyBC,SAAA,EACtCH,EAAAA,EAAAA,KAAA,OACEE,UAAU,gCACVkC,IAAKrB,EAAOM,OAAOC,QACnBe,IAAI,eACJC,QAAQ,UAEVtC,EAAAA,EAAAA,KAACkB,EAAAA,EAAM,CACLtB,KAAK,SACLF,SAAU,mCACVC,GAAI,kBAAMqB,EAAc,iBAAkB,KAAK,EAC/CvB,KAAM,WACN8C,MAAI,aAOd9B,EAAAA,EAAAA,MAAA,OAAKP,UAAU,+BAA8BC,SAAA,EAC3CH,EAAAA,EAAAA,KAAA,SACEO,QAAQ,mBACRL,UAAU,8BAA6BC,SACxC,qBAGDH,EAAAA,EAAAA,KAACU,EAAAA,GAAK,CACJ8B,GAAG,WACHlC,KAAI,mBACJD,GAAG,mBACHoC,UAAU,MACVjC,YAAY,0DACZN,UAAU,0DAKpB,E,oBCoEA,EAhKmB,SAAHV,GAAmC,IAA7BuB,EAAMvB,EAANuB,OAAQC,EAAaxB,EAAbwB,cAC5B0B,GAAsBC,EAAAA,EAAAA,UAAS,GAAEC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA1BI,EAAGF,EAAA,GAAEG,EAAMH,EAAA,GAClBI,GAAkCL,EAAAA,EAAAA,WAAS,GAAKM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAzCE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAC9BG,GAAsCT,EAAAA,EAAAA,UAAS,MAAKU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAA7CE,EAAWD,EAAA,GAAEE,EAAcF,EAAA,GAGlC,OACErD,EAAAA,EAAAA,KAAA,OAAKE,WAAYa,EAAOM,OAAOmC,OAAS,iCAAiCrD,UACvEH,EAAAA,EAAAA,KAACyD,EAAAA,GAAU,CACTnD,KAAK,QACLoD,OAAQ,SAACC,GAAW,OAClBlD,EAAAA,EAAAA,MAAA,MAAIP,UAAU,uEAAsEC,SAAA,CACjFY,EAAO6C,MAAMC,KAAI,SAACC,EAAMC,GAAK,OAC5BtD,EAAAA,EAAAA,MAAA,MAEEP,UAAU,oEAAmEC,SAAA,EAE7EH,EAAAA,EAAAA,KAAA,QAAME,UAAU,sDAAqDC,SAClE4D,EAAQ,KAEXtD,EAAAA,EAAAA,MAAA,OAAKP,UAAU,yEAAwEC,SAAA,EAErFH,EAAAA,EAAAA,KAACiB,EAAU,CACTX,KAAI,SAAA0D,OAAWD,EAAK,SACpBxD,QAAO,OAAAyD,OAASF,GAChB1D,MAAO,aACPC,GAAE,OAAA2D,OAASF,GACXtD,YAAa,kBAGfR,EAAAA,EAAAA,KAACiB,EAAU,CACTX,KAAI,SAAA0D,OAAWD,EAAK,eACpBxD,QAAO,aAAAyD,OAAeF,GACtB1D,MAAO,mBACPC,GAAE,aAAA2D,OAAeF,GACjBtD,YAAa,8CAEbsD,EAAKG,QACLjE,EAAAA,EAAAA,KAAA,OAAAG,UAEEH,EAAAA,EAAAA,KAACkB,EAAAA,EAAM,CACLtB,KAAM,SACNF,SACE,iEAEFD,MACEO,EAAAA,EAAAA,KAAAmB,EAAAA,SAAA,CAAAhB,UACEM,EAAAA,EAAAA,MAAA,SACEF,QAAO,aAAAyD,OAAeF,GACtB5D,UAAU,mCAAkCC,SAAA,EAE5CH,EAAAA,EAAAA,KAACoB,EAAAA,IAAe,CAAClB,UAAU,kBAAkB,gBAE7CF,EAAAA,EAAAA,KAAA,SACEJ,KAAK,OACLS,GAAE,aAAA2D,OAAeF,GACjBvC,QAAM,EACNE,OAAO,UAEPC,SAAU,SAACC,GACT,IAAMC,EAAOD,EAAEE,OAAOC,MAAM,GACtBC,EAAS,IAAIC,WACnBD,EAAOE,cAAcL,GACrBG,EAAOG,OAAS,WACd,IAAMgC,EAAWnC,EAAOI,OACxBnB,EACqB,SAAAgD,OAAJ,MAAfV,EACaR,EACAQ,EADG,UAEhBY,GAEFX,EAAe,MACfJ,GAAa,EACf,EACAI,EAAe,KACjB,aAWbO,EAAKG,QACJxD,EAAAA,EAAAA,MAAA,OAAKP,UAAU,0BAAyBC,SAAA,EACtCH,EAAAA,EAAAA,KAAA,OAAAG,UACEH,EAAAA,EAAAA,KAAA,OACEE,UAAU,gCACVkC,IAAK0B,EAAKG,MACV5B,IAAI,aACJC,QAAQ,YAKV7B,EAAAA,EAAAA,MAAA,OAAKP,UAAU,sBAAqBC,SAAA,EAClCH,EAAAA,EAAAA,KAACkB,EAAAA,EAAM,CACLtB,KAAM,SACNH,MACEO,EAAAA,EAAAA,KAACmE,EAAAA,IAAQ,CAACjE,UAAU,0BAEtBP,GAAI,WACFqB,EAAc,SAADgD,OAAUD,EAAK,UAAU,IACtCZ,GAAa,GACbI,EAAeQ,EACjB,KAEF/D,EAAAA,EAAAA,KAACkB,EAAAA,EAAM,CACLtB,KAAM,SACNH,MACEO,EAAAA,EAAAA,KAAA,SAAOO,QAAO,aAAAyD,OAAeF,GAAO3D,UAClCH,EAAAA,EAAAA,KAACoE,EAAAA,IAAM,CAAClE,UAAU,oDAWZ,IAAnBmE,QAAQN,KACP/D,EAAAA,EAAAA,KAAA,OAAAG,UACEH,EAAAA,EAAAA,KAACkB,EAAAA,EAAM,CACLtB,KAAK,SACLF,SAAU,mCACVC,GAAI,kBAAMgE,EAAYW,OAAOP,EAAM,EACnCtE,KAAM,WACN8C,MAAI,WAtHPwB,EA2HF,KAGP/D,EAAAA,EAAAA,KAAA,MAAIE,UAAU,2BAA0BC,UACtCH,EAAAA,EAAAA,KAACkB,EAAAA,EAAM,CACLtB,KAAK,SACLC,SAAUqD,EACVvD,GAAI,WACFgE,EAAYY,KAAK,IACjBxB,GAAO,SAACyB,GAAI,OAAKA,EAAO,CAAC,IACzBrB,GAAa,EACf,EACAzD,SAAU,mCACVD,KAAM,mBAGP,KAKf,E,6BCnKagF,EAAkBC,EAAAA,KAAaC,MAAM,CAEhDtD,OAAQqD,EAAAA,KAAaC,MAAM,CAEzBnB,MAAOkB,EAAAA,KACJE,IAAI,EAAG,iCACPC,IAAI,GAAI,mCACRlE,SAAS,cAIdiD,MAAOc,EAAAA,GACLA,EAAAA,KAAaC,MAAM,CAEjBG,KAAMJ,EAAAA,KACHE,IAAI,GAAI,kCACRC,IAAI,IAAK,mCACTlE,SAAS,YAGZoE,WAAYL,EAAAA,KACTE,IAAI,IAAK,mCACTC,IAAI,IAAM,mCACVlE,SAAS,iB,UCKlB,EA9Bc,SAAHnB,GAA4B,IAAtBG,EAAEH,EAAFG,GAAIqF,EAAUxF,EAAVwF,WACnB,OACEvE,EAAAA,EAAAA,MAAA,OACE,cAAY,eACZP,UAAS,4EAAA8D,OAA8EgB,EAAU,sFAAqF7E,SAAA,EAEtLM,EAAAA,EAAAA,MAAA,OAAAN,SAAA,EACEM,EAAAA,EAAAA,MAAA,MAAIP,UAAU,0EAAyEC,SAAA,EACrFH,EAAAA,EAAAA,KAAA,KAAGE,UAAU,yBAAwBC,UACnCH,EAAAA,EAAAA,KAACiF,EAAAA,IAAa,MACZ,iCAGNjF,EAAAA,EAAAA,KAAA,KAAGE,UAAU,gBAAeC,SAAC,8EAI/BH,EAAAA,EAAAA,KAAA,OAAKE,UAAU,aAAYC,UACzBH,EAAAA,EAAAA,KAAA,UACEJ,KAAK,SACLK,QAASN,EACTO,UAAU,iKAAgKC,SAC3K,gBAMT,EC6DA,EAhFwB,WACtB,IAAM+E,GAAWC,EAAAA,EAAAA,MACjBzC,GAA0BC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAlC0C,EAAKxC,EAAA,GAAEyC,EAAQzC,EAAA,GACd0C,GAAeC,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,aAAa,IAAzDH,WAMR,OAHIA,EAAWI,OAAS,GACtBC,aAAaC,QAAQ,aAAcC,KAAKC,UAAUR,KAGlDtF,EAAAA,EAAAA,KAAC+F,EAAAA,GAAM,CACLC,cAAe,CACb3F,GAAI,GACJgB,OAAQ,CACNmC,MAAO,GACPyC,UAAW,GACX3E,QAAS,MAEXsC,MAAO,CACL,CACEkB,KAAM,GACNC,WAAY,GACZd,MAAO,QAKbiC,iBAAkBzB,EAClB0B,SAAU,SAACpF,EAAQqF,GACjBrF,EAAOV,GAAKgG,KAAKC,MACjBF,EAAOG,YAGPrB,GAASsB,EAAAA,EAAAA,GAAgBzF,IAEzBsE,GAAS,GAGToB,YAAW,WACTpB,GAAS,EACX,GAAG,IACL,EACAqB,iBAAe,EAAAvG,SAEd,SAAAX,GAAA,IAAGuB,EAAMvB,EAANuB,OAAQ4F,EAAOnH,EAAPmH,QAAS3F,EAAaxB,EAAbwB,cAA6B4F,GAAFpH,EAAZqH,aAAmBrH,EAALoH,OAAK,OACrDnG,EAAAA,EAAAA,MAACqG,EAAAA,GAAI,CAAClG,aAAa,QAAOT,SAAA,EACxBM,EAAAA,EAAAA,MAAA,WAASP,UAAU,6BAA4BC,SAAA,CAE5CiF,IACCpF,EAAAA,EAAAA,KAAC+G,EAAK,CACJpH,GAAI,kBAAM0F,GAAS,EAAM,EACzBL,WAAaI,EAA4B,gBAApB,qBAKzBpF,EAAAA,EAAAA,KAACgH,EAAW,CAACjG,OAAQA,EAAQC,cAAeA,KAG5ChB,EAAAA,EAAAA,KAACiH,EAAU,CAACjG,cAAeA,EAAeD,OAAQA,QAGpDf,EAAAA,EAAAA,KAAA,OAAKE,UAAU,sBAAqBC,UAElCH,EAAAA,EAAAA,KAACkB,EAAAA,EAAM,CACL,cAAY,cACZrB,WAAY8G,GAAWC,GACvBhH,KAAK,SACLF,SAAQ,0DAAAsE,OACL2C,EAAyB,aAAf,cAEblH,KAAM,yBAGL,GAIf,C,6ECzFO,IAAM+G,EAAkB,SAACU,GAK9B,MAAO,CACLtH,KAAM,mBACNuH,QAASD,EAEb,EAGaE,EAAkB,SAAC/G,GAI9B,MAAO,CACLT,KAAM,mBACNuH,QAAS9G,EAEb,C","sources":["components/ui/button/Button.jsx","components/ui/input/FieldInput.jsx","components/CreateGroup.jsx","components/CreateTerm.jsx","schema/validation.js","components/ui/toast/Toast.jsx","pages/home/CreateFlashcard.jsx","redux/actions/actions.js"],"sourcesContent":["import React from \"react\";\r\n\r\nconst Button = ({ text, btnclass, fn, type, disabled, title, ref }) => {\r\n  return (\r\n    <button\r\n      onClick={fn}\r\n      type={type}\r\n      title={title}\r\n      ref={ref}\r\n      disabled={disabled}\r\n      className={btnclass}\r\n    >\r\n      {text}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","// Input component\r\n\r\nimport { ErrorMessage, Field } from \"formik\";\r\nimport React from \"react\";\r\n\r\nconst FieldInput = ({ label, id, name, htmlFor, placeholder }) => {\r\n  return (\r\n    <div className=\"flex flex-col gap-2 md:w-80 w-full\">\r\n      <label htmlFor={htmlFor} className=\"font-semibold text-gray-500\">\r\n        {label}*\r\n      </label>\r\n      <div className=\"flex flex-col gap-2 md:w-80 w-full relative\">\r\n        <Field\r\n          type=\"text\"\r\n          id={id}\r\n          name={name}\r\n          placeholder={placeholder}\r\n          className=\"p-2 text-lg border-2 rounded-md\"\r\n          required\r\n          autoComplete=\"false\"\r\n        />\r\n        <ErrorMessage\r\n          name={name}\r\n          component=\"span\"\r\n          data-testid=\"error-msg\"\r\n          className=\"absolute top-12 left-0 text-red-600\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FieldInput;\r\n","// create group and group description page for the flashcard app\r\n\r\nimport React from \"react\";\r\nimport FieldInput from \"./ui/input/FieldInput\";\r\nimport { Field } from \"formik\";\r\nimport { AiFillFileImage } from \"react-icons/ai\";\r\nimport Button from \"./ui/button/Button\";\r\n\r\nconst CreateGroup = ({ values, setFieldValue }) => {\r\n  // This function returns a `div` element that contains the create group and group description form.\r\n  return (\r\n    <div className=\"bg-white shadow-md md:p-10 p-5 rounded-md sm:p-5\">\r\n      {/* This `div` element contains the group name input and the group image\r\n      upload button. */}\r\n      <div\r\n        className={`flex items-end gap-5 mb-5 sm:flex-row flex-col flex-wrap`}\r\n      >\r\n        {/* Enter group input */}\r\n        <FieldInput\r\n          name={`groups.group`}\r\n          id={\"group\"}\r\n          htmlFor={\"group\"}\r\n          label={\"Create Group\"}\r\n          placeholder={\"Organic Chemistry\"}\r\n        />\r\n\r\n        <div>\r\n          {/* Button for uploading Group image */}\r\n          <Button\r\n            type={\"button\"}\r\n            btnclass={\r\n              \"border-2 rounded-md min-w-max font-semibold text-lg px-6 py-2\"\r\n            }\r\n            text={\r\n              <>\r\n                <label\r\n                  htmlFor=\"profile\"\r\n                  className=\"flex items-center gap-1 cursor-pointer\"\r\n                >\r\n                  <AiFillFileImage className=\"text-blue-700\" />\r\n                  {values.groups.Profile ? \"Change\" : \"Upload\"} Image\r\n                  <Field\r\n                    type=\"file\"\r\n                    id=\"profile\"\r\n                    name={`groups.profile`}\r\n                    hidden\r\n                    value=\"\"\r\n                    accept=\"image/*\"\r\n                    onChange={(e) => {\r\n                      const file = e.target.files[0];\r\n                      const reader = new FileReader();\r\n                      reader.readAsDataURL(file);\r\n\r\n                      reader.onload = () => {\r\n                        setFieldValue(\"groups.Profile\", reader.result);\r\n                      };\r\n                    }}\r\n                  />\r\n                </label>\r\n              </>\r\n            }\r\n          />\r\n        </div>\r\n        {values.groups.Profile && (\r\n          <>\r\n            <div className=\"flex items-center gap-5\">\r\n              <img\r\n                className=\"w-20 aspect-square rounded-md\"\r\n                src={values.groups.Profile}\r\n                alt=\"card_profile\"\r\n                loading=\"lazy\"\r\n              />\r\n              <Button\r\n                type=\"button\"\r\n                btnclass={\"font-semibold text-blue-700 mt-5\"}\r\n                fn={() => setFieldValue(\"groups.Profile\", null)}\r\n                text={\"- Remove\"}\r\n                list\r\n              />\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n      {/* Group description */}\r\n      <div className=\"flex flex-col gap-2 relative\">\r\n        <label\r\n          htmlFor=\"groupDescription\"\r\n          className=\"font-semibold text-gray-500\"\r\n        >\r\n          Add Description\r\n        </label>\r\n        <Field\r\n          as=\"textarea\"\r\n          name={`groups.groupDesc`}\r\n          id=\"groupDescription\"\r\n          maxLength=\"500\"\r\n          placeholder=\"Write your description here ( max length is 500 words )\"\r\n          className=\"p-2 text-lg border-2 rounded-md h-36 resize-none\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateGroup;\r\n","// create term and defination page for the flashcard app\r\n\r\nimport React, { useState } from \"react\";\r\nimport { AiFillFileImage } from \"react-icons/ai\";\r\nimport { BiEdit } from \"react-icons/bi\";\r\nimport { TbTrashX } from \"react-icons/tb\";\r\nimport Button from \"./ui/button/Button\";\r\nimport FieldInput from \"./ui/input/FieldInput\";\r\nimport { FieldArray } from \"formik\";\r\n\r\nconst CreateTerm = ({ values, setFieldValue }) => {\r\n  const [num, setNum] = useState(0);\r\n  const [activeBtn, setActiveBtn] = useState(true);\r\n  const [deleteIndex, setDeleteIndex] = useState(null);\r\n\r\n  // This function returns a `div` element that contains the create term and definition form.\r\n  return (\r\n    <div className={!values.groups.group && \"opacity-50 pointer-events-none\"}>\r\n      <FieldArray\r\n        name=\"terms\"\r\n        render={(formHelpers) => (\r\n          <ul className=\"bg-white md:p-10 rounded-md sm:p-5 p-5 shadow-md flex flex-col gap-8\">\r\n            {values.terms.map((item, index) => (\r\n              <li\r\n                key={index}\r\n                className=\"flex gap-5 items-start md:flex-row flex-col sm:flex-col sm:w-full\"\r\n              >\r\n                <span className=\"px-4 py-2 text-xl font-bold rounded-full bg-red-200\">\r\n                  {index + 1}\r\n                </span>\r\n                <div className=\"flex items-end flex-wrap gap-5 md:flex-row sm:flex-col flex-col w-full\">\r\n                  {/* Enter term input */}\r\n                  <FieldInput\r\n                    name={`terms.${index}.term`}\r\n                    htmlFor={`Term${item}`}\r\n                    label={\"Enter Term\"}\r\n                    id={`Term${item}`}\r\n                    placeholder={\"What is ISP?\"}\r\n                  />\r\n                  {/* Enter Defination input */}\r\n                  <FieldInput\r\n                    name={`terms.${index}.defination`}\r\n                    htmlFor={`Defination${item}`}\r\n                    label={\"Enter Defination\"}\r\n                    id={`Defination${item}`}\r\n                    placeholder={\"An ISP (internet service provider) is...\"}\r\n                  />\r\n                  {!item.image && (\r\n                    <div>\r\n                      {/* button for uploading term image */}\r\n                      <Button\r\n                        type={\"button\"}\r\n                        btnclass={\r\n                          \"border-2 rounded-md  min-w-max font-semibold text-lg px-6 py-2\"\r\n                        }\r\n                        text={\r\n                          <>\r\n                            <label\r\n                              htmlFor={`cardImage-${item}`}\r\n                              className=\"flex items-center cursor-pointer\"\r\n                            >\r\n                              <AiFillFileImage className=\"text-blue-700\" />\r\n                              Upload Image\r\n                              <input\r\n                                type=\"file\"\r\n                                id={`cardImage-${item}`}\r\n                                hidden\r\n                                accept=\"image/*\"\r\n                                // taking the input data from the user and extracting the image link from file object using FileReader\r\n                                onChange={(e) => {\r\n                                  const file = e.target.files[0];\r\n                                  const reader = new FileReader();\r\n                                  reader.readAsDataURL(file);\r\n                                  reader.onload = () => {\r\n                                    const imageUrl = reader.result;\r\n                                    setFieldValue(\r\n                                      deleteIndex == null\r\n                                        ? `terms.${num}.image`\r\n                                        : `terms.${deleteIndex}.image`,\r\n                                      imageUrl\r\n                                    );\r\n                                    setDeleteIndex(null);\r\n                                    setActiveBtn(false);\r\n                                  };\r\n                                  setDeleteIndex(null);\r\n                                }}\r\n                              />\r\n                            </label>\r\n                          </>\r\n                        }\r\n                      />\r\n                    </div>\r\n                  )}\r\n                  {/* This code renders a `div` element if the `item.image`\r\n                  variable is not `null`. The `div` element contains the term\r\n                  image, a trash button, and an edit button. */}\r\n                  {item.image && (\r\n                    <div className=\"flex items-center gap-5\">\r\n                      <div>\r\n                        <img\r\n                          className=\"w-20 aspect-square rounded-md\"\r\n                          src={item.image}\r\n                          alt=\"term_image\"\r\n                          loading=\"lazy\"\r\n                        />\r\n                      </div>\r\n\r\n                      {\r\n                        <div className=\"flex flex-col gap-5\">\r\n                          <Button\r\n                            type={\"button\"}\r\n                            text={\r\n                              <TbTrashX className=\"text-3xl text-red-500\" />\r\n                            }\r\n                            fn={() => {\r\n                              setFieldValue(`terms.${index}.image`, \"\");\r\n                              setActiveBtn(true);\r\n                              setDeleteIndex(index);\r\n                            }}\r\n                          />\r\n                          <Button\r\n                            type={\"button\"}\r\n                            text={\r\n                              <label htmlFor={`cardImage-${item}`}>\r\n                                <BiEdit className=\"text-blue-700 text-3xl cursor-pointer\" />\r\n                              </label>\r\n                            }\r\n                          />\r\n                        </div>\r\n                      }\r\n                    </div>\r\n                  )}\r\n                  {/* This code checks if the index variable is equal to 0. // If\r\n                  it is, then the code renders a button that allows the user to\r\n                  remove the term from the list. */}\r\n                  {Number(!index) === 0 && (\r\n                    <div>\r\n                      <Button\r\n                        type=\"button\"\r\n                        btnclass={\"font-semibold text-blue-700 mt-5\"}\r\n                        fn={() => formHelpers.remove(index)}\r\n                        text={\"- Remove\"}\r\n                        list\r\n                      />\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </li>\r\n            ))}\r\n\r\n            <li className=\"text-center md:text-left\">\r\n              <Button\r\n                type=\"button\"\r\n                disabled={activeBtn}\r\n                fn={() => {\r\n                  formHelpers.push(\"\");\r\n                  setNum((prev) => prev + 1);\r\n                  setActiveBtn(true);\r\n                }}\r\n                btnclass={\"font-semibold text-blue-700 mt-5\"}\r\n                text={\"+ Add more\"}\r\n              />\r\n            </li>\r\n          </ul>\r\n        )}\r\n      ></FieldArray>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateTerm;\r\n","// This function imports the `Yup` library.\r\nimport * as Yup from \"yup\";\r\n\r\n// This function exports a `flashcardSchema` object.\r\n// The `flashcardSchema` object is used to validate the data submitted by the user in the flashcard form.\r\nexport const flashcardSchema = Yup.object().shape({\r\n  // The `groups` property is an object that represents the groups of flashcards.\r\n  groups: Yup.object().shape({\r\n    // The `group` property is a string that represents the name of the group.\r\n    group: Yup.string()\r\n      .min(2, \"Minimum character length is 2\")\r\n      .max(20, \"You have reached the max length\")\r\n      .required(\"Required\"),\r\n  }),\r\n\r\n  // The `terms` property is an array of objects that represent the terms in each group.\r\n  terms: Yup.array(\r\n    Yup.object().shape({\r\n      // The `term` property is a string that represents the term.\r\n      term: Yup.string()\r\n        .min(10, \"Minimum character length is 10\")\r\n        .max(200, \"You have reached the max length\")\r\n        .required(\"Required\"),\r\n\r\n      // The `defination` property is a string that represents the definition of the term.\r\n      defination: Yup.string()\r\n        .min(100, \"Minimum character length is 100\")\r\n        .max(2000, \"You have reached the max length\")\r\n        .required(\"Required\"),\r\n    })\r\n  ),\r\n});\r\n","import React from \"react\";\r\nimport { BsCheckCircle } from \"react-icons/bs\";\r\n\r\nconst Toast = ({ fn, toastClass }) => {\r\n  return (\r\n    <div\r\n      data-testid=\"toast-dataid\"\r\n      className={`p-5 space-y-4 bg-blue-600 w-72 sm:w-96 rounded-md text-white fixed top-2 ${toastClass} left-1/2 transform -translate-x-1/2 transition-all duration-1000 ease-in-out z-50`}\r\n    >\r\n      <div>\r\n        <h3 className=\"flex flex-col sm:flex-row items-center gap-2 text-xl font-semibold mb-2\">\r\n          <i className=\"text-2xl text-blue-200\">\r\n            <BsCheckCircle />\r\n          </i>\r\n          Your Flashcard is created.\r\n        </h3>\r\n        <p className=\"text-blue-200\">\r\n          Go to My Flashcard tab and check your all of your created flashcards.\r\n        </p>\r\n      </div>\r\n      <div className=\"text-right\">\r\n        <button\r\n          type=\"button\"\r\n          onClick={fn}\r\n          className=\"font-semibold rounded-md px-4 py-1 text-blue-200 min-w-max hover:bg-blue-700 border-2 border-blue-300 transition-all hover:border-blue-700 active:animate-ping\"\r\n        >\r\n          Dismiss\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Toast;\r\n","// page for creating flashcards\r\n\r\nimport React, { useState } from \"react\";\r\nimport CreateGroup from \"../../components/CreateGroup\";\r\nimport CreateTerm from \"../../components/CreateTerm\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { createFlashcard } from \"../../redux/actions/actions\";\r\nimport Button from \"../../components/ui/button/Button\";\r\nimport { flashcardSchema } from \"../../schema/validation\";\r\nimport Toast from \"../../components/ui/toast/Toast\";\r\n\r\nconst CreateFlashcard = () => {\r\n  const dispatch = useDispatch();\r\n  const [toast, setToast] = useState(false);\r\n  const { flashcards } = useSelector((state) => state.flashCardData);\r\n\r\n  // If flashcards exist in local storage, set them to the state\r\n  if (flashcards.length > 0)\r\n    localStorage.setItem(\"flashcards\", JSON.stringify(flashcards));\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        id: \"\",\r\n        groups: {\r\n          group: \"\",\r\n          groupDesc: \"\",\r\n          Profile: null,\r\n        },\r\n        terms: [\r\n          {\r\n            term: \"\",\r\n            defination: \"\",\r\n            image: null,\r\n          },\r\n        ],\r\n      }}\r\n      // validating and dispatching the form data to redux state on onSubmit\r\n      validationSchema={flashcardSchema}\r\n      onSubmit={(values, action) => {\r\n        values.id = Date.now();\r\n        action.resetForm();\r\n\r\n        // Dispatch the createFlashcard action with the form data\r\n        dispatch(createFlashcard(values));\r\n\r\n        setToast(true);\r\n\r\n        // After 2 seconds, set the toast variable to false to hide the toast message\r\n        setTimeout(() => {\r\n          setToast(false);\r\n        }, 2000);\r\n      }}\r\n      validateOnMount\r\n    >\r\n      {({ values, isValid, setFieldValue, isSubmitting, dirty }) => (\r\n        <Form autoComplete=\"false\">\r\n          <section className=\"mb-10 flex flex-col gap-10\">\r\n            {/* toast component for letting the user know that their flashcard is created */}\r\n            {toast && (\r\n              <Toast\r\n                fn={() => setToast(false)}\r\n                toastClass={!toast ? \"-translate-y-96\" : \"translate-y-0\"}\r\n              />\r\n            )}\r\n\r\n            {/* Create Group component */}\r\n            <CreateGroup values={values} setFieldValue={setFieldValue} />\r\n\r\n            {/* Create Term component */}\r\n            <CreateTerm setFieldValue={setFieldValue} values={values} />\r\n          </section>\r\n\r\n          <div className=\"mx-auto text-center\">\r\n            {/* button for submiting the flashcard */}\r\n            <Button\r\n              data-testid=\"submit-form\"\r\n              disabled={!(isValid && dirty)}\r\n              type=\"submit\"\r\n              btnclass={`font-semibold rounded-md text-white text-xl px-14 py-4 ${\r\n                !isValid ? \"bg-red-200\" : \"bg-red-600\"\r\n              }`}\r\n              text={\"Create Flashcard\"}\r\n            />\r\n          </div>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default CreateFlashcard;\r\n","// This function creates an action that creates a flashcard.\r\nexport const createFlashcard = (formData) => {\r\n  // The `type` property of the action is set to `CREATE_FLASHCARD`.\r\n  // This indicates that the action is for creating a flashcard.\r\n  // The `payload` property of the action is set to the `formData` object.\r\n  // This object contains the data that is used to create the flashcard.\r\n  return {\r\n    type: \"CREATE_FLASHCARD\",\r\n    payload: formData,\r\n  };\r\n};\r\n\r\n// This function creates an action that deletes a flashcard.\r\nexport const deleteFlashcard = (id) => {\r\n  // The `type` property of the action is set to `DELETE_FLASHCARD`.\r\n  // This indicates that the action is for deleting a flashcard.\r\n  // The `payload` property of the action is set to the `id` of the flashcard that is to be deleted.\r\n  return {\r\n    type: \"DELETE_FLASHCARD\",\r\n    payload: id,\r\n  };\r\n};\r\n"],"names":["_ref","text","btnclass","fn","type","disabled","title","ref","_jsx","onClick","className","children","label","id","name","htmlFor","placeholder","_jsxs","Field","required","autoComplete","ErrorMessage","component","values","setFieldValue","FieldInput","Button","_Fragment","AiFillFileImage","groups","Profile","hidden","value","accept","onChange","e","file","target","files","reader","FileReader","readAsDataURL","onload","result","src","alt","loading","list","as","maxLength","_useState","useState","_useState2","_slicedToArray","num","setNum","_useState3","_useState4","activeBtn","setActiveBtn","_useState5","_useState6","deleteIndex","setDeleteIndex","group","FieldArray","render","formHelpers","terms","map","item","index","concat","image","imageUrl","TbTrashX","BiEdit","Number","remove","push","prev","flashcardSchema","Yup","shape","min","max","term","defination","toastClass","BsCheckCircle","dispatch","useDispatch","toast","setToast","flashcards","useSelector","state","flashCardData","length","localStorage","setItem","JSON","stringify","Formik","initialValues","groupDesc","validationSchema","onSubmit","action","Date","now","resetForm","createFlashcard","setTimeout","validateOnMount","isValid","dirty","isSubmitting","Form","Toast","CreateGroup","CreateTerm","formData","payload","deleteFlashcard"],"sourceRoot":""}